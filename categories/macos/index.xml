<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Macos on nspool&#39;s blog</title>
    <link>https://nspool.github.io/categories/macos/</link>
    <description>Recent content in Macos on nspool&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Mon, 15 Jan 2018 21:24:00 +1100</lastBuildDate>
    
	<atom:link href="https://nspool.github.io/categories/macos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NSUndoManager in a storyboard-based macOS app</title>
      <link>https://nspool.github.io/2018/01/nsundomanager/</link>
      <pubDate>Mon, 15 Jan 2018 21:24:00 +1100</pubDate>
      
      <guid>https://nspool.github.io/2018/01/nsundomanager/</guid>
      <description>The MacOS application template in a newer version of Xcode defaults to using storyboards. To implement custom Undo and Redo operations it is necessary to implement to have your NSView implement NSWindowDelegate.
Create an NSUndoManager for the view:
NSUndoManager* undoManager;  Assign the delegate programmatically within initWithFrame and set your view as the first responder:
NSWindow* mainWindow = [[[NSApplication sharedApplication] windows] objectAtIndex:0]; mainWindow.delegate = self; undoManager = [[NSUndoManager alloc] init]; [self becomeFirstResponder];  Then in the method where the undoable action takes place</description>
    </item>
    
    <item>
      <title>Building OpenCV 3.1.0 on macOS</title>
      <link>https://nspool.github.io/2017/03/building-opencv/</link>
      <pubDate>Sat, 18 Mar 2017 21:32:56 +1100</pubDate>
      
      <guid>https://nspool.github.io/2017/03/building-opencv/</guid>
      <description>Clone the OpenCV and OpenCV_Contrib repos and checkout release 3.1.0:
git clone https://github.com/opencv/opencv.git git clone https://github.com/opencv/opencv_contrib.git cd opencv &amp;amp;&amp;amp; git checkout 3.1.0 &amp;amp;&amp;amp; cd .. cd opencv_contrib &amp;amp;&amp;amp; git checkout 3.1.0 &amp;amp;&amp;amp; cd ..  Create a build directory, configure and build the project:
mkdir opencv_build &amp;amp;&amp;amp; cd opencv_build cmake -D CMAKE_BUILD_TYPE=Release -D APPLE_FRAMEWORK=ON  -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_CUDA=OFF -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ../opencv/ make -j7 # runs 7 jobs in parallel cd .</description>
    </item>
    
    <item>
      <title>Handling an NSFileHandle SIGPIPE in Swift</title>
      <link>https://nspool.github.io/2015/09/nsfilehandle/</link>
      <pubDate>Wed, 16 Sep 2015 20:30:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/09/nsfilehandle/</guid>
      <description>If you are working with an NSFileHandle that encapsulated a pipe, it was possible to use a @try-@catch block to handle a failed write.
In this example, fileHandle could represent an open socket, with the SIGPIP thrown if the client disconnects unexpectedly and the pipe is closed:
@try{[fileHandle writeData:fileData];}@catch (NSException *exception){// Ignore the SIGPIP}@finally{CFRelease(fileData);} Unfortunately in Swift 2.0 this isn&amp;rsquo;t possible; the analogous try-catch doesn&amp;rsquo;t capture signals.</description>
    </item>
    
    <item>
      <title>StatusNet on MAMP</title>
      <link>https://nspool.github.io/2013/12/status.net-on-mamp/</link>
      <pubDate>Wed, 11 Dec 2013 09:00:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2013/12/status.net-on-mamp/</guid>
      <description>(Update: StatusNet is now merged into GNU social)
StatusNet is a federated microblogging service. This is how I managed to setup a local server on my laptop under MAMP.
 Set MAMP PHP version to 5.2.* Extract tar into htdocs Fix permissions Replace .htaccess with the htaccess.sample, filling out the values manually Add statusnet database using phpmyadmin Make sure statusnet database user has all the permissions. Apply this patch. If this isn&amp;rsquo;t applied doing a tweet status update will result in a HTTP 500.</description>
    </item>
    
  </channel>
</rss>