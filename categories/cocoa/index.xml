<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cocoa on Programming Notes</title>
    <link>https://nspool.github.io/categories/cocoa/</link>
    <description>Recent content in Cocoa on Programming Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Mon, 15 Jan 2018 21:24:00 +1100</lastBuildDate>
    
	<atom:link href="https://nspool.github.io/categories/cocoa/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NSUndoManager in a storyboard-based macOS app</title>
      <link>https://nspool.github.io/2018/01/nsundomanager/</link>
      <pubDate>Mon, 15 Jan 2018 21:24:00 +1100</pubDate>
      
      <guid>https://nspool.github.io/2018/01/nsundomanager/</guid>
      <description>The MacOS application template in a newer version of Xcode defaults to using storyboards. To implement custom Undo and Redo operations it is necessary to implement to have your NSView implement NSWindowDelegate.
Create an NSUndoManager for the view:
NSUndoManager* undoManager;  Assign the delegate programmatically within initWithFrame and set your view as the first responder:
NSWindow* mainWindow = [[[NSApplication sharedApplication] windows] objectAtIndex:0]; mainWindow.delegate = self; undoManager = [[NSUndoManager alloc] init]; [self becomeFirstResponder];  Then in the method where the undoable action takes place</description>
    </item>
    
    <item>
      <title>Handling an NSFileHandle SIGPIPE in Swift</title>
      <link>https://nspool.github.io/2015/09/nsfilehandle/</link>
      <pubDate>Wed, 16 Sep 2015 20:30:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/09/nsfilehandle/</guid>
      <description>If you are working with an NSFileHandle that encapsulated a pipe, it was possible to use a @try-@catch block to handle a failed write.
In this example, fileHandle could represent an open socket, with the SIGPIP thrown if the client disconnects unexpectedly and the pipe is closed:
@try { [fileHandle writeData:fileData]; } @catch (NSException *exception) { // Ignore the SIGPIP } @finally { CFRelease(fileData); } Unfortunately in Swift 2.0 this isn&amp;rsquo;t possible; the analogous try-catch doesn&amp;rsquo;t capture signals.</description>
    </item>
    
  </channel>
</rss>