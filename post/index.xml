<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Programming Notes</title>
    <link>https://nspool.github.io/post/</link>
    <description>Recent content in Posts on Programming Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Fri, 06 Apr 2018 21:11:00 +1000</lastBuildDate>
    
	<atom:link href="https://nspool.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding a syscall to Minix 2</title>
      <link>https://nspool.github.io/2018/04/minix-syscall/</link>
      <pubDate>Fri, 06 Apr 2018 21:11:00 +1000</pubDate>
      
      <guid>https://nspool.github.io/2018/04/minix-syscall/</guid>
      <description>Getting Minix 2 Older Minix versions are available from the Minix 3 official website. If using a VM I would recommend the HD image from the Minix 2 Quick and Dirty edition. This is what I used for this blog post.
Running in VirtualBox If using the Quick and Dirty edition HDD image from the link above, first convert it to VDI format:
VBoxManage convertdd minix-2.0-hd-64MB.img minix-2.0-hd-64MB.vdi --format VDI  Create a Linux 2.</description>
    </item>
    
    <item>
      <title>NSUndoManager in a storyboard-based macOS app</title>
      <link>https://nspool.github.io/2018/01/nsundomanager/</link>
      <pubDate>Mon, 15 Jan 2018 21:24:00 +1100</pubDate>
      
      <guid>https://nspool.github.io/2018/01/nsundomanager/</guid>
      <description>The MacOS application template in a newer version of Xcode defaults to using storyboards. To implement custom Undo and Redo operations it is necessary to implement to have your NSView implement NSWindowDelegate.
Create an NSUndoManager for the view:
NSUndoManager* undoManager;  Assign the delegate programmatically within initWithFrame and set your view as the first responder:
NSWindow* mainWindow = [[[NSApplication sharedApplication] windows] objectAtIndex:0]; mainWindow.delegate = self; undoManager = [[NSUndoManager alloc] init]; [self becomeFirstResponder];  Then in the method where the undoable action takes place</description>
    </item>
    
    <item>
      <title>Building a fat libSDL.a for iOS development</title>
      <link>https://nspool.github.io/2017/03/building-fat-library/</link>
      <pubDate>Sun, 19 Mar 2017 21:24:00 +1100</pubDate>
      
      <guid>https://nspool.github.io/2017/03/building-fat-library/</guid>
      <description>Updated 2017-11-19: Rewrote for clarity and removed references to the 32-bit simulator which has been removed from the default install as of Xcode 9
 For iOS development it is handy to have a single SDL2 library that supports both the simulator and the physical device. This is how to create a libSDL2.a that can be used for both.
Step 1: Build libSDL2.a for each target Download the SDL2 source from the official SDL website and verify the integrity of the source package using GPG.</description>
    </item>
    
    <item>
      <title>Building OpenCV 3.1.0 on macOS</title>
      <link>https://nspool.github.io/2017/03/building-opencv/</link>
      <pubDate>Sat, 18 Mar 2017 21:32:56 +1100</pubDate>
      
      <guid>https://nspool.github.io/2017/03/building-opencv/</guid>
      <description>Clone the OpenCV and OpenCV_Contrib repos and checkout release 3.1.0:
git clone https://github.com/opencv/opencv.git git clone https://github.com/opencv/opencv_contrib.git cd opencv &amp;amp;&amp;amp; git checkout 3.1.0 &amp;amp;&amp;amp; cd .. cd opencv_contrib &amp;amp;&amp;amp; git checkout 3.1.0 &amp;amp;&amp;amp; cd ..  Create a build directory, configure and build the project:
mkdir opencv_build &amp;amp;&amp;amp; cd opencv_build cmake -D CMAKE_BUILD_TYPE=Release -D APPLE_FRAMEWORK=ON -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_CUDA=OFF -D OPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules ../opencv/ make -j7 # runs 7 jobs in parallel cd .</description>
    </item>
    
    <item>
      <title>Building Live555 RTSP library in Visual Studio 2015</title>
      <link>https://nspool.github.io/2016/02/building-live555/</link>
      <pubDate>Mon, 01 Feb 2016 20:10:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2016/02/building-live555/</guid>
      <description>Update 2017-08-23 Thanks to @kwikwag for making a Windows batch file to simplify all this! Find it here.
 Live555 is an excellent RTSP library for Windows, but can be a bit tricky to build. These are the instructions that I follow to build it in Visual Studio 2015 in Windows 10 Professional.
1) Extract the live555-latest.tar.gz into your source directory. 2) Make the following changes to the win32config file:  Change msvcirt.</description>
    </item>
    
    <item>
      <title>ZeroMQ &#43; Vagrant for Fun and Profit</title>
      <link>https://nspool.github.io/2015/12/zeromq-virtualbox/</link>
      <pubDate>Sat, 26 Dec 2015 10:00:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/12/zeromq-virtualbox/</guid>
      <description>ZeroMQ is a powerful library for network programming.
But it&amp;rsquo;s no fun to just connecting to localhost! By building a single Ubuntu VM and saving it as a Vagrant box, we can spin up as many clients as the machine can handle!
Install Ubuntu 14.04 into a VirtualBox VM Remeber to Install Ubuntu with user &amp;lsquo;Vagrant&amp;rsquo; and forward port 22 to work from the host. Tested with ubuntu-14.04.3-server-amd64.iso</description>
    </item>
    
    <item>
      <title>Running a full Bitcoin node on a Debian VPS</title>
      <link>https://nspool.github.io/2015/12/bitcoin-on-linux/</link>
      <pubDate>Wed, 23 Dec 2015 15:30:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/12/bitcoin-on-linux/</guid>
      <description>1. Building BitCoin-Core Install the build environment and dependencies
sudo apt-get update sudo apt-get install build-essential autoconf libssl-dev libboost-dev libboost-chrono-dev libboost-filesystem-dev libboost-program-options-dev libboost-system-dev libboost-test-dev libboost-thread-dev libdb4.8++-dev libdb4.8-dev pkg-config  Clone the Git repo and view available version:
git clone https://github.com/bitcoin/bitcoin.git git tag  Checkout the last released version ie.
git checkout 0.9.5rc2 cd bitcoin ./autogen.sh ./configure --without-gui sudo make install which bitcoind which bitcoin-cli  Now run setup Bitcoind</description>
    </item>
    
    <item>
      <title>Quick REST endpoint with Ruby &amp; Sinatra</title>
      <link>https://nspool.github.io/2015/09/serving-files/</link>
      <pubDate>Wed, 23 Sep 2015 20:30:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/09/serving-files/</guid>
      <description>Suppose we wish to serve a bunch of images from a directory by over a REST endpoint and retrieve them by index. For example: http://localhost:4567/image?index=0 would return the first image in the directory. This is easy to accomplish in Ruby by using Sinatra:
require &amp;#39;sinatra&amp;#39; get &amp;#39;/image&amp;#39; do # Read all the JPEG files from a given directory @images = Dir.glob(&amp;#34;/Users/nspool/Pictures/*.jpg&amp;#34;) # Take the path at the supplied index index = params[&amp;#39;index&amp;#39;].</description>
    </item>
    
    <item>
      <title>Handling an NSFileHandle SIGPIPE in Swift</title>
      <link>https://nspool.github.io/2015/09/nsfilehandle/</link>
      <pubDate>Wed, 16 Sep 2015 20:30:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/09/nsfilehandle/</guid>
      <description>If you are working with an NSFileHandle that encapsulated a pipe, it was possible to use a @try-@catch block to handle a failed write.
In this example, fileHandle could represent an open socket, with the SIGPIP thrown if the client disconnects unexpectedly and the pipe is closed:
@try { [fileHandle writeData:fileData]; } @catch (NSException *exception) { // Ignore the SIGPIP } @finally { CFRelease(fileData); } Unfortunately in Swift 2.0 this isn&amp;rsquo;t possible; the analogous try-catch doesn&amp;rsquo;t capture signals.</description>
    </item>
    
    <item>
      <title>Creating a Certificate Chain for AWS</title>
      <link>https://nspool.github.io/2015/07/moving/</link>
      <pubDate>Mon, 20 Jul 2015 09:00:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/07/moving/</guid>
      <description>GitHub Pages doesn&amp;rsquo;t (yet) allow an SSL certificate for a custom domain, so I&amp;rsquo;ve moved this blog to S3.
Uploading the certificate to AWS requires the CA certificate chain. This isn&amp;rsquo;t always always provided by the CA, but can be generated from the command line. For example, Comodo provides the certificates in the chain, so all that&amp;rsquo;s necessary to create the file is to concatenate the certs in PEM format into one file:</description>
    </item>
    
    <item>
      <title>Write a Lisp web app over SSH with Emacs</title>
      <link>https://nspool.github.io/2015/02/remoting-to-a-lisp/</link>
      <pubDate>Wed, 04 Feb 2015 22:00:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/02/remoting-to-a-lisp/</guid>
      <description>After reading about the rise and fall of Lisp at the Jet Propulsion Lab JPL I refresh my Lisp experience. Now I can hack on a Lisp web service hosted on a remote server from within Emacs from my laptop.
Setting up a Lisp dev environment is easy: the instructions at Common Lisp Wiki will give you a GNU/Emacs with SLIME mode package installed. For a remote development setup, both the remote server and local dev machine should have Steel Bank Common Lisp along with the QuickLisp package manager installed.</description>
    </item>
    
    <item>
      <title>Counting Happy Numbers in Mathematica</title>
      <link>https://nspool.github.io/2015/01/happy-numbers/</link>
      <pubDate>Wed, 28 Jan 2015 22:18:56 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/01/happy-numbers/</guid>
      <description>Here is a Mathematica snippit to count the number of Happy Numbers up to 1000:
Length[Select[Range[1000],FixedPoint[Total[IntegerDigits[#]^2]&amp;amp;,#,10]==1&amp;amp;]] </description>
    </item>
    
    <item>
      <title>Printing strings in GDB</title>
      <link>https://nspool.github.io/2015/01/strings-and-gdb/</link>
      <pubDate>Wed, 14 Jan 2015 21:16:11 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/01/strings-and-gdb/</guid>
      <description>In a GDB disassembly, what string is at the value being compared with eax?
x080485a0 &amp;lt;+48&amp;gt;: je 0x34(%esp),%eax  Solution:
(gdb) x/s *(esp + 0x34) 0x8048690: &amp;quot;hellostring!\n&amp;quot;  </description>
    </item>
    
    <item>
      <title>Bruteforcing XOR encrypted PHP cookies</title>
      <link>https://nspool.github.io/2015/01/cracking-a-xor/</link>
      <pubDate>Tue, 13 Jan 2015 21:16:11 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/01/cracking-a-xor/</guid>
      <description>In days part there were sites known to store login status in a client-side cookie obscured by a XOR cyper. When first visting the site some code like this would run:
$cookie = xor_crypt($json_encode(array(&amp;#34;login&amp;#34;=&amp;gt;&amp;#34;false&amp;#34;))); Then $cookie would be set on the client side, something like data=GkAPXlVaD0BZE1RSDREGE08=. A successful login would containg a similar:
$cookie = xor_crypt($json_encode(array(&amp;#34;login&amp;#34;=&amp;gt;&amp;#34;true&amp;#34;))); That would result in the cookie data=GkAPXlVaD0BZE0ZBFAdBTA==. Looking at there two values it is plain that they are very similar.</description>
    </item>
    
    <item>
      <title>Using netcat with authenticated sessions</title>
      <link>https://nspool.github.io/2015/01/cookies-and-netcat/</link>
      <pubDate>Mon, 12 Jan 2015 21:08:56 +0000</pubDate>
      
      <guid>https://nspool.github.io/2015/01/cookies-and-netcat/</guid>
      <description>I&amp;rsquo;ve decided to move this blog to GitHub Pages. This will be the third move since this blog was started in 2007 on the Super Dimension Fortress and then to some cheap wordpress shared hosting.
In the following couple of weeks I&amp;rsquo;ll triage the old site and re-post anything that is still worthwhile to this blog.
In the meantime here&amp;rsquo;s an example of using netcat to do a HTTP request containing a cookie.</description>
    </item>
    
    <item>
      <title>Partitioning Sets</title>
      <link>https://nspool.github.io/2014/08/notes-from-a-combinatorial-problem/</link>
      <pubDate>Fri, 01 Aug 2014 09:00:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2014/08/notes-from-a-combinatorial-problem/</guid>
      <description>We have a program that performs a comparison of every pair of elements in a database, and then compares the result with the median value of all values. It was suggested that the program should instead make pairwise comparisons within every possible combination of subsets. How many comparisons would we end up making?
For this example, each element in our database will be represented by an integer. We call these elements the population which is then partitioned into all possible distinct pairwise disjoint subsets .</description>
    </item>
    
    <item>
      <title>StatusNet on MAMP</title>
      <link>https://nspool.github.io/2013/12/status.net-on-mamp/</link>
      <pubDate>Wed, 11 Dec 2013 09:00:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2013/12/status.net-on-mamp/</guid>
      <description>(Update: StatusNet is now merged into GNU social)
StatusNet is a federated microblogging service. This is how I managed to setup a local server on my laptop under MAMP.
 Set MAMP PHP version to 5.2.* Extract tar into htdocs Fix permissions Replace .htaccess with the htaccess.sample, filling out the values manually Add statusnet database using phpmyadmin Make sure statusnet database user has all the permissions. Apply this patch. If this isn&amp;rsquo;t applied doing a tweet status update will result in a HTTP 500.</description>
    </item>
    
    <item>
      <title>WebKit Keyframe Animations</title>
      <link>https://nspool.github.io/2013/11/odradek/</link>
      <pubDate>Sat, 23 Nov 2013 09:00:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2013/11/odradek/</guid>
      <description>Odradek doesn&amp;rsquo;t need Javascript to move around thanks to CSS3 and WebKit keyframe animations.
A simple transition move-odradek can be defined in pure CSS as:
@-webkit-keyframes move-odradek { from { margin-left:100%;} to {margin-left:0%;} } Assign the animation to the element:
-webkit-animation: move-odradek 30s; </description>
    </item>
    
    <item>
      <title>Getting Started with Plan 9 graphics programming</title>
      <link>https://nspool.github.io/2013/02/bouncing-ball/</link>
      <pubDate>Fri, 22 Feb 2013 09:00:00 +0000</pubDate>
      
      <guid>https://nspool.github.io/2013/02/bouncing-ball/</guid>
      <description>Where to start writing apps for Plan 9 from Bell Labs? Most of the documentation around focuses on the shell and the file system. The tutorial explains how to write a simple bouncing ball app for the Plan 9 UI.
First, install either the official Plan 9 distribution or the community fork 9front. If you are only interested in experimenting with the Plan 9 GUI, I would recommend 9front. However if you intend on understanding Plan 9 as an operating systems research project in the way that it was intended then start with the official distribution, set up the prerequisite file, CPU and auth servers and go from there.</description>
    </item>
    
  </channel>
</rss>